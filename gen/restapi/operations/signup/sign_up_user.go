// Code generated by go-swagger; DO NOT EDIT.

package signup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SignUpUserHandlerFunc turns a function with the right signature into a sign up user handler
type SignUpUserHandlerFunc func(SignUpUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignUpUserHandlerFunc) Handle(params SignUpUserParams) middleware.Responder {
	return fn(params)
}

// SignUpUserHandler interface for that can handle valid sign up user params
type SignUpUserHandler interface {
	Handle(SignUpUserParams) middleware.Responder
}

// NewSignUpUser creates a new http.Handler for the sign up user operation
func NewSignUpUser(ctx *middleware.Context, handler SignUpUserHandler) *SignUpUser {
	return &SignUpUser{Context: ctx, Handler: handler}
}

/*SignUpUser swagger:route GET /signup signup signUpUser

Sign up Api takes params and register user

*/
type SignUpUser struct {
	Context *middleware.Context
	Handler SignUpUserHandler
}

func (o *SignUpUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSignUpUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
