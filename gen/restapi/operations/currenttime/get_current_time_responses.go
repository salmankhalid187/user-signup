// Code generated by go-swagger; DO NOT EDIT.

package currenttime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/salmankhalid187/user-signup/gen/models"
)

// GetCurrentTimeOKCode is the HTTP code returned for type GetCurrentTimeOK
const GetCurrentTimeOKCode int = 200

/*GetCurrentTimeOK Success

swagger:response getCurrentTimeOK
*/
type GetCurrentTimeOK struct {

	/*
	  In: Body
	*/
	Payload *models.CurrenttimeSuccess `json:"body,omitempty"`
}

// NewGetCurrentTimeOK creates GetCurrentTimeOK with default headers values
func NewGetCurrentTimeOK() *GetCurrentTimeOK {

	return &GetCurrentTimeOK{}
}

// WithPayload adds the payload to the get current time o k response
func (o *GetCurrentTimeOK) WithPayload(payload *models.CurrenttimeSuccess) *GetCurrentTimeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current time o k response
func (o *GetCurrentTimeOK) SetPayload(payload *models.CurrenttimeSuccess) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentTimeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCurrentTimeBadRequestCode is the HTTP code returned for type GetCurrentTimeBadRequest
const GetCurrentTimeBadRequestCode int = 400

/*GetCurrentTimeBadRequest Invalid request

swagger:response getCurrentTimeBadRequest
*/
type GetCurrentTimeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCurrentTimeBadRequest creates GetCurrentTimeBadRequest with default headers values
func NewGetCurrentTimeBadRequest() *GetCurrentTimeBadRequest {

	return &GetCurrentTimeBadRequest{}
}

// WithPayload adds the payload to the get current time bad request response
func (o *GetCurrentTimeBadRequest) WithPayload(payload *models.ErrorResponse) *GetCurrentTimeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current time bad request response
func (o *GetCurrentTimeBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentTimeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
