// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "User Sign up APIs",
    "version": "0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/current-time": {
      "get": {
        "tags": [
          "currenttime"
        ],
        "summary": "Sign up Api takes params and register user",
        "operationId": "getCurrentTime",
        "parameters": [
          {
            "$ref": "#/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/currenttime-success"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "signup"
        ],
        "summary": "Sign up Api takes params and register user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "user detail param here",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user-signup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/signup-success"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      }
    }
  },
  "definitions": {
    "currenttime-success": {
      "description": "Time success response object",
      "type": "object",
      "title": "Current Time Success",
      "properties": {
        "time": {
          "type": "string"
        }
      }
    },
    "error-response": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "signup-success": {
      "description": "Signup success response object",
      "type": "object",
      "title": "Signup success",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "user-signup": {
      "description": "properties to create a user",
      "type": "object",
      "title": "user-signup",
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "age": {
          "type": "number"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "default": "name",
      "name": "name",
      "in": "query"
    },
    "orderBy": {
      "pattern": "^[A-Za-z0-9_]+$",
      "type": "string",
      "default": "createddate",
      "name": "orderBy",
      "in": "query"
    }
  },
  "responses": {
    "conflict": {
      "description": "Duplicate resource",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "User Sign up APIs",
    "version": "0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/current-time": {
      "get": {
        "tags": [
          "currenttime"
        ],
        "summary": "Sign up Api takes params and register user",
        "operationId": "getCurrentTime",
        "parameters": [
          {
            "type": "string",
            "default": "name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/currenttime-success"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "signup"
        ],
        "summary": "Sign up Api takes params and register user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "user detail param here",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user-signup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/signup-success"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "currenttime-success": {
      "description": "Time success response object",
      "type": "object",
      "title": "Current Time Success",
      "properties": {
        "time": {
          "type": "string"
        }
      }
    },
    "error-response": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "signup-success": {
      "description": "Signup success response object",
      "type": "object",
      "title": "Signup success",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "user-signup": {
      "description": "properties to create a user",
      "type": "object",
      "title": "user-signup",
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "age": {
          "type": "number"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "default": "name",
      "name": "name",
      "in": "query"
    },
    "orderBy": {
      "pattern": "^[A-Za-z0-9_]+$",
      "type": "string",
      "default": "createddate",
      "name": "orderBy",
      "in": "query"
    }
  },
  "responses": {
    "conflict": {
      "description": "Duplicate resource",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    }
  }
}`))
}
